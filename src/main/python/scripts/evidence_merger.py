# Copyright 2017 Rice University
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from __future__ import print_function
import argparse
import sys
import json
import math
import random
import numpy as np
from itertools import chain
import sys
sys.setrecursionlimit(10000)



HELP = """Use this script to extract evidences from a raw data file with sequences generated by driver.
You can also filter programs based on number and length of sequences, and control the samples from each program."""


def extract_evidence(clargs):
    print('Loading data file...', end='')
    with open(clargs.input_file[0]) as f:
        js = json.load(f)
    print('done')
     = {}
    done = 0
    for program in js['programs']:
        file = program[file]
        programs_db[file] = program
        print('Formed Dict for {} programs'.format(done), end='\r')
        done += 1

    print('Loading data file...', end='')
    with open(clargs.input_file[0]) as f:
        js = json.load(f)
    print('done')

    programs2 = {}
    done = 0
    for query_program in js['programs']:
        file = query_program[file]
        match = 0
        for item in programs_db[file]:
            bol1 = check_seq(item[sequences], query_program[sequences])
            bol2 = check_ast(item[ast], query_program[ast])
            bol3 = check_jdoc(item[javadoc], query_program[javadoc])

            if bol1 and bol2 and bol3:
                match += 1

        print('Formed Dict for {} programs'.format(done), end='\r')
        done += 1






    print('\nWriting to {}...'.format(clargs.output_file[0]), end='')
    with open(clargs.output_file[0], 'w') as f:
        json.dump({'programs': programs}, fp=f, indent=2)
    print('done')



def check_jdoc(a, b):
    return a == b

def check_ast(ast1, ast2):
    if ast1[node] != ast2[node]:
        return False

    if len(ast1[nodes]) != len(ast2[nodes]):
        return False


    for calls in ast1[nodes]


if __name__ == '__main__':
    parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter,
                                     description=HELP)
    parser.add_argument('input_file', type=str, nargs=1,
                        help='input data file')
    parser.add_argument('output_file', type=str, nargs=1,
                        help='output data file')

    clargs = parser.parse_args()
    sys.setrecursionlimit(clargs.python_recursion_limit)
    extract_evidence(clargs)
