# Copyright 2017 Rice University
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from __future__ import print_function
import argparse
import sys
import json
import math
import random
import numpy as np
from itertools import chain

import bayou.models.low_level_evidences.evidence
from bayou.models.low_level_evidences.utils import gather_calls

HELP = """Use this script to extract evidences from a raw data file with sequences generated by driver.
You can also filter programs based on number and length of sequences, and control the samples from each program."""


def extract_evidence(clargs):
    print('Loading data file...')
    with open(clargs.input_file[0]) as f:
        js = json.load(f)
    print('Done')
    done = 0
    programs = []

    ''' Program_dict dictionary holds Key values in format
    (Key = File_Name Value = dict(Key = String Method_Name, Value = [String ReturnType, List[String] FormalParam , List[String] Sequences] ))
    '''

    #This part appends sorrounding evidences
    done = 0
    max_num_sorr = 0
    for program in js['programs']:

        sorrReturnType = program['sorrreturntype']
        num_sorr = len(sorrReturnType)

        if num_sorr > max_num_sorr:
            max_num_sorr = num_sorr


        done += 1
        print('Done for {} programs and max till now is {}'.format(done, max_num_sorr), end='\r')


    print('Maximum number of sorrounding methods is: ')
    print(max_num_sorr)



if __name__ == '__main__':
    parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter,
                                     description=HELP)
    parser.add_argument('input_file', type=str, nargs=1,
                     help='input data file')
    parser.add_argument('--python_recursion_limit', type=int, default=10000,
                        help='set recursion limit for the Python interpreter')

    clargs = parser.parse_args()
    sys.setrecursionlimit(clargs.python_recursion_limit)
    extract_evidence(clargs)
